---
title: "Ćwiczenie 2 - Modelowanie stężenia ozonu"
author: "Daria Kokot"
date: "2024-10-17"
format:
  html:
    code-fold: true
---

# Wstęp do Ćwiczenia 2

W tym ćwiczeniu zbudujemy model klasyfikacji, który przewiduje, czy stężenie ozonu było wysokie, czy niskie. Wykorzystamy zbiór danych `mydata` z pakietu `openair` (Carslaw and Ropkins 2012). Zanim przekształcimy dane i zdefiniujemy model, zbadamy właściwości danych oraz korelacje pomiędzy zmiennymi.

## SEKCJA 1: Przygotowanie i eksploracja danych

W tej sekcji przeanalizujemy zbiór danych oraz zbudujemy kilka podstawowych wizualizacji.

```{r, results='hide'}
# Ładowanie pakietów
library(tidymodels)
library(skimr)
library(GGally)
library(openair)
library(ggpubr)
library(lubridate)
library(rsample)
```

# Ustawienie preferencji dla tidymodels
```{r, results='hide'}
tidymodels_prefer()
```

# Wczytanie i wybór danych oraz podsumowanie
```{r}
air <- mydata |> selectByDate(year = 2002)
air |> skim()
```

# Usunięcie brakujących danych
```{r}
air <- air |> na.omit()
```

# Analiza korelacji między nox i no2
```{r}
set.seed(222)
air[sample(1:nrow(air), size = 300, replace = FALSE), ] |>
  select(nox, no2) |>
  ggpairs()
```

# Wykres regresji liniowej dla nox i no2
```{r}
set.seed(222)
air[sample(1:nrow(air), size = 300, replace = FALSE), ] |>
  select(nox, no2) |>
  ggplot(aes(nox, no2)) +
  geom_point() +
  geom_smooth(method = "lm", se = TRUE, formula = y ~ x) +
  stat_cor(label.x = 10, label.y = 80) +
  stat_regline_equation(label.x = 10, label.y = 82) +
  theme_bw()
```

# Wykres czasowy stężeń ozonu
```{r}
air |>
  ggplot(aes(date, o3)) +
  geom_line() +
  theme_bw()
```


```{r}
# Znajdz minimalną i maksymalną wartość ozonu
air |>
  pull(o3) |>
  range()
```

# Przekształcenie zmiennej ilościowej o3 na jakościową (Niskie/Wysokie)
```{r}
air <- air |>
  mutate(ozone = cut(
    o3,
    breaks = c(-0.1, 10, 53),
    labels = c("Niskie", "Wysokie")
  ))
```

# Sprawdzenie liczby obserwacji dla każdej z kategorii
```{r}
air |> count(ozone)
```

# Podzał danych na zbiór treningowy i testowy
```{r}
set.seed(222)
data_split <- initial_split(air, prop = 0.75, strata = ozone)
train_data <- training(data_split)
test_data <- testing(data_split)
```

# Definicja modelu regresji logistycznej
```{r}
logistic_model <- logistic_reg() |>
  set_engine("glm") |>
  set_mode("classification")
```

# Tworzenie recepty do przekształceń danych
```{r}
recipe_ozone <- recipe(ozone ~ nox + no2 + ws + wd + pm10 + pm25 + so2 + co + date,
  data = train_data
) |>
  step_date(date, features = c("month", "dow")) |>
  step_mutate(hour = lubridate::hour(date)) |>
  step_rm(date) |>
  step_normalize(all_numeric_predictors()) |>
  step_corr(all_numeric_predictors(), threshold = 0.9) |> # Usunięcie skorelowanych zmiennych
  step_YeoJohnson(all_numeric_predictors()) # Przekształcenie Yeo-Johnson dla zmiennych numerycznych
```

# Workflow łączący receptę z modelem
```{r}
workflow_ozone <- workflow() |>
  add_recipe(recipe_ozone) |>
  add_model(logistic_model)
```

# Trening modelu na danych treningowych
```{r}
fitted_model <- workflow_ozone |> fit(data = train_data)
```

# Predykcja na danych testowych
```{r}
predictions <- fitted_model |> predict(new_data = test_data, type = "prob")
```

# Ocena jakości modelu
```{r}
metrics <- fitted_model |>
  predict(new_data = test_data) |>
  bind_cols(test_data) |>
  metrics(truth = ozone, estimate = .pred_class)
```

# Wyświetlenie wyników metryk
```{r}
metrics
```